openapi: 3.0.0
info:
  title: Car Management API
  description: API for managing cars and users
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local server
paths:
  /v1/cars:
    get:
      summary: Get list of cars
      responses:
        "200":
          description: Successful response
        "404":
          description: No cars found
        "500":
          description: Internal server error
    post:
      summary: Add a new car
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/v1_cars_body"
      responses:
        "201":
          description: Car successfully added
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
  /v1/cars/{id}:
    get:
      summary: Get details of a car
      parameters:
        - name: id
          in: path
          description: ID of the car
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: Successful response
        "404":
          description: Car not found
    put:
      summary: Update a car
      parameters:
        - name: id
          in: path
          description: ID of the car to update
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/cars_id_body"
      responses:
        "200":
          description: Car successfully updated
        "400":
          description: Bad request
        "404":
          description: Car not found
    delete:
      summary: Soft delete a car
      parameters:
        - name: id
          in: path
          description: ID of the car to delete
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: Car successfully deleted
        "404":
          description: Car not found
        "500":
          description: Internal server error
  /v1/users/register:
    post:
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/users_register_body"
        required: true
      responses:
        "201":
          description: User registration successful
        "400":
          description: Bad request
        "500":
          description: Internal server error
  /v1/users/login:
    post:
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/users_login_body"
        required: true
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
        "400":
          description: Bad request
        "500":
          description: Internal server error
  /v1/users/profile:
    get:
      summary: Get current user profile
      responses:
        "200":
          description: Successful response
        "400":
          description: User not found
        "500":
          description: Internal server error
      security:
        - BearerAuth: []
  /v1/users/superadmin/login:
    post:
      summary: Superadmin login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/superadmin_login_body"
        required: true
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
  /v1/users/superadmin/change-role/{userId}:
    put:
      summary: Change user role to admin by superadmin
      parameters:
        - name: userId
          in: path
          description: ID of the user to update role
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: User role successfully updated
        "403":
          description: "Unauthorized, user is not superadmin"
        "500":
          description: Internal server error
      security:
        - BearerAuth: []
components:
  schemas:
    v1_cars_body:
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        brand:
          type: string
        year:
          type: integer
        rent_price:
          type: number
        picture:
          type: string
    superadmin_login_body:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    users_login_body:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    users_register_body:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
    inline_response_200:
      type: object
      properties:
        message:
          type: string
        token:
          type: string
    cars_id_body:
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        brand:
          type: string
        year:
          type: integer
        rent_price:
          type: number
        picture:
          type: string
          format: binary
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
